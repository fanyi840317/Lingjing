# 神秘事件研究系统 - Docker Compose配置
# 包含完整的服务栈：应用、数据库、搜索引擎、缓存等

version: '3.8'

services:
  # ================================
  # 主应用服务
  # ================================
  mystery-research:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        BUILD_ENV: production
    container_name: mystery-research-app
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - DEBUG=false
      - LOG_LEVEL=INFO
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=${NEO4J_PASSWORD:-mystery123}
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - REDIS_URL=redis://redis:6379
      - POSTGRES_URL=postgresql://postgres:${POSTGRES_PASSWORD:-mystery123}@postgres:5432/mystery_research
    volumes:
      - app_data:/app/data
      - app_logs:/app/logs
      - app_cache:/app/cache
      - app_reports:/app/reports
      - ./config:/app/config:ro
      - ./.env:/app/.env:ro
    depends_on:
      - neo4j
      - elasticsearch
      - postgres
      - redis
    networks:
      - mystery-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # ================================
  # Neo4j 图数据库
  # ================================
  neo4j:
    image: neo4j:5.15-community
    container_name: mystery-neo4j
    restart: unless-stopped
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    environment:
      - NEO4J_AUTH=neo4j/${NEO4J_PASSWORD:-mystery123}
      - NEO4J_PLUGINS=["apoc"]
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*
      - NEO4J_dbms_memory_heap_initial__size=512m
      - NEO4J_dbms_memory_heap_max__size=2G
      - NEO4J_dbms_memory_pagecache_size=1G
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
    networks:
      - mystery-network
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "${NEO4J_PASSWORD:-mystery123}", "RETURN 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # ================================
  # Elasticsearch 搜索引擎
  # ================================
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: mystery-elasticsearch
    restart: unless-stopped
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - bootstrap.memory_lock=true
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - mystery-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # ================================
  # PostgreSQL 关系数据库
  # ================================
  postgres:
    image: postgres:15-alpine
    container_name: mystery-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=mystery_research
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-mystery123}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-postgres.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - mystery-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d mystery_research"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # ================================
  # Redis 缓存
  # ================================
  redis:
    image: redis:7-alpine
    container_name: mystery-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - mystery-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # ================================
  # Nginx 反向代理
  # ================================
  nginx:
    image: nginx:alpine
    container_name: mystery-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - mystery-research
    networks:
      - mystery-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # ================================
  # 监控服务
  # ================================
  prometheus:
    image: prom/prometheus:latest
    container_name: mystery-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - mystery-network

  grafana:
    image: grafana/grafana:latest
    container_name: mystery-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - mystery-network

  # ================================
  # 日志聚合
  # ================================
  elasticsearch-logs:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: mystery-elasticsearch-logs
    restart: unless-stopped
    ports:
      - "9201:9200"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - cluster.name=logs-cluster
    volumes:
      - elasticsearch_logs_data:/usr/share/elasticsearch/data
    networks:
      - mystery-network

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: mystery-kibana
    restart: unless-stopped
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch-logs:9200
      - SERVER_NAME=kibana
    depends_on:
      - elasticsearch-logs
    networks:
      - mystery-network

  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: mystery-logstash
    restart: unless-stopped
    volumes:
      - ./monitoring/logstash/pipeline:/usr/share/logstash/pipeline:ro
      - ./monitoring/logstash/config:/usr/share/logstash/config:ro
      - app_logs:/app/logs:ro
    depends_on:
      - elasticsearch-logs
    networks:
      - mystery-network

# ================================
# 网络配置
# ================================
networks:
  mystery-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ================================
# 数据卷配置
# ================================
volumes:
  # 应用数据
  app_data:
    driver: local
  app_logs:
    driver: local
  app_cache:
    driver: local
  app_reports:
    driver: local
  
  # Neo4j数据
  neo4j_data:
    driver: local
  neo4j_logs:
    driver: local
  neo4j_import:
    driver: local
  neo4j_plugins:
    driver: local
  
  # Elasticsearch数据
  elasticsearch_data:
    driver: local
  elasticsearch_logs_data:
    driver: local
  
  # PostgreSQL数据
  postgres_data:
    driver: local
  
  # Redis数据
  redis_data:
    driver: local
  
  # Nginx日志
  nginx_logs:
    driver: local
  
  # 监控数据
  prometheus_data:
    driver: local
  grafana_data:
    driver: local